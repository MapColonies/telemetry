import { readdirSync, readFileSync, writeFileSync } from 'node:fs';
import path from 'node:path';
import type { AttributeDescription, ConventionSchema } from './autogen';
import { getAllPropertyNames } from './util';

const SEMANTIC_ATTRIBUTES_DIR = 'src/semanticAttributes';
const FILE_HEADER_MARK = `/* eslint-disable */
/**
 * This file was automatically generated by @mapcolonies/telemetry npm package.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and release new compiled package to regenerate this file.
 */\n\n`;

const DEPRECATION_JS_DOCSTRING = `* @deprecated and should use newer attributes\n`;
const JS_COMMENT_START = `/**`;
const JS_COMMENT_END = `*/`;

// read and filter all relevant static db json files per domain
const dbFiles = readdirSync(SEMANTIC_ATTRIBUTES_DIR).filter((file) => file.endsWith('.json'));

// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
console.log(`Detect ${dbFiles.length} domains db files: ${dbFiles}`);

for (const file of dbFiles) {
  const data = readFileSync(path.join(SEMANTIC_ATTRIBUTES_DIR, file), { encoding: 'utf-8' });
  const dataJson: ConventionSchema = JSON.parse(data);
  const attributesArr = getAllPropertyNames(dataJson);

  generateConstantTsFile(attributesArr, dataJson.domain.toUpperCase());
  console.log(attributesArr);
}

function generateConstantTsFile(domainAttribute: AttributeDescription[], domain: string): void {
  writeFileSync(path.join(SEMANTIC_ATTRIBUTES_DIR, `${domain}_GENERATED_ATTRIBUTES.ts`), FILE_HEADER_MARK);

  for (const attribute of domainAttribute) {
    const valueStr = attribute.propertyName;
    const keyStr = valueStr?.replaceAll('.', '_').toUpperCase();
    let attributeStr = `const ${keyStr} = '${valueStr}'\n`;
    const docStr = buildDocString(attribute.description as string, attribute.deprecated);
    attributeStr = `${docStr}\n${attributeStr}\n`;
    writeFileSync(path.join(SEMANTIC_ATTRIBUTES_DIR, `${domain}_GENERATED_ATTRIBUTES.ts`), attributeStr, { flag: 'a+' });
  }
}

function buildDocString(description: string, deprecated: boolean | undefined): string {
  const deprecatedStr = deprecated ? `${DEPRECATION_JS_DOCSTRING}\n` : '';
  const docStr = `${JS_COMMENT_START}\n* ${description}\n${deprecatedStr}${JS_COMMENT_END}`;
  return docStr;
}
